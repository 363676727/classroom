var COLORS = [
  '#e21400', '#91580f', '#f8a700', '#f78b00',
  '#58dc00', '#287b00', '#a8f07a', '#4ae8c4',
  '#3b88eb', '#3824aa', '#a700ff', '#d300e7'
];

var $messages = $('.messages'); // Messages area

var socket = io.connect("<%= Settings.socket_url %>");
var username = $.trim($('.username')[0].innerHTML);

socket.emit('add user', username);

// Gets the color of a username through our hash function
function getUsernameColor (username) {
  // Compute hash code
  var hash = 7;
  for (var i = 0; i < username.length; i++) {
     hash = username.charCodeAt(i) + (hash << 5) - hash;
  }
  // Calculate color
  var index = Math.abs(hash % COLORS.length);
  return COLORS[index];
}

function addLoginMsg(data) {
  $('.participants').text('');
  var items = data.loginTime;

  for(var i = 0; i < items.length; i++) {
    var item = data.loginTime[i].split(':');

    moment.lang("zh-cn");
    var time = moment(parseInt(item[1], 10)).format("MMMDæ—¥ Ah:mm");

    var $username = $('<span class="username">').text(item[0])
                     .css('color', getUsernameColor(item[0]));

    var $date = $('<span class="date">').text(" joined at " + time);

    var $participant = $('<li>').addClass(item[0]).append($username, $date);

    $('.participants').append($participant);
  }
}

// Adds the visual chat message to the message list
function addChatMessage (data) {
  var $usernameDiv = $('<span class="username">').text(data.username)
                       .css('color', getUsernameColor(data.username));

  var $messageBodyDiv = $('<span class="messageBody">').text(data.message);

  var $messageDiv = $('<li class="message">').data('username', data.username)
                      .append($usernameDiv, $messageBodyDiv);

  $('.messages').append($messageDiv);
  $messages[0].scrollTop = $messages[0].scrollHeight;
}

// Prevents input from having injected markup
function cleanInput (input) {
  return $('<div/>').text(input).text();
}

$('form').submit(function(){
  var message = $('.msg').val();
  // Prevent markup from being injected into the message
  message = cleanInput(message);
  // if there is a non-empty message and a socket connection
  if (message) {
    $('.msg').val('');
    addChatMessage({
      username: username,
      message: message
    });
    // tell server to execute 'new message' and send along one parameter
    socket.emit('new message', message);
  }
  // if omit this statement, current page will jump to login page after you submited a message
  return false;
});

// socket events

socket.on('new message', function(data){
  addChatMessage(data);
});

socket.on('user joined', function (data) {
  addLoginMsg(data);
});

socket.on('user left', function(data){
  $(".participants ." + data.username + " .username").css("color", "gray");
  setTimeout(function() { $(".participants ." + data.username).fadeOut(3000); }, 1000);
});
